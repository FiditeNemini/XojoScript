name: Build XojoScript Bytecode Compiler and VM

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x86_64, x86, arm64, armv7]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      # ======================
      # Linux: Download, Build, and Install libffi then compile
      # ======================
      - name: Setup and Build libffi on Linux
        if: runner.os == 'Linux'
        run: |
          echo "Building libffi for architecture ${{ matrix.arch }}"
          wget https://github.com/libffi/libffi/releases/download/v3.4.5/libffi-3.4.5.tar.gz
          tar xzf libffi-3.4.5.tar.gz
          cd libffi-3.4.5
          ./configure --prefix=$HOME/libffi
          make -j$(nproc)
          make install
          cd ..
          echo "Compiling xojoscript with libffi"
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            g++ -std=c++17 -I$HOME/libffi/include -L$HOME/libffi/lib -o xojoscript xojoscript.cpp -lffi
          elif [ "${{ matrix.arch }}" = "x86" ]; then
            sudo apt-get update
            sudo apt-get install -y g++-multilib
            g++ -std=c++17 -m32 -I$HOME/libffi/include -L$HOME/libffi/lib -o xojoscript xojoscript.cpp -lffi
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            sudo apt-get update
            sudo apt-get install -y aarch64-linux-gnu-g++
            aarch64-linux-gnu-g++ -std=c++17 -I$HOME/libffi/include -L$HOME/libffi/lib -o xojoscript xojoscript.cpp -lffi
          elif [ "${{ matrix.arch }}" = "armv7" ]; then
            sudo apt-get update
            sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
            arm-linux-gnueabihf-g++ -std=c++17 -I$HOME/libffi/include -L$HOME/libffi/lib -o xojoscript xojoscript.cpp -lffi
          fi

      # ======================
      # macOS: Download, Build, and Install libffi then compile
      # ======================
      - name: Setup and Build libffi on macOS
        if: runner.os == 'macOS'
        run: |
          echo "Building libffi for architecture ${{ matrix.arch }}"
          curl -L -o libffi-3.4.5.tar.gz https://github.com/libffi/libffi/releases/download/v3.4.5/libffi-3.4.5.tar.gz
          tar xzf libffi-3.4.5.tar.gz
          cd libffi-3.4.5
          ./configure --prefix=$HOME/libffi
          make -j$(sysctl -n hw.ncpu)
          make install
          cd ..
          echo "Compiling xojoscript with libffi"
          if [ "${{ matrix.arch }}" = "x86_64" ] || [ "${{ matrix.arch }}" = "arm64" ]; then
            clang++ -std=c++17 -arch ${{ matrix.arch }} -I$HOME/libffi/include -L$HOME/libffi/lib -o xojoscript xojoscript.cpp -lffi
          else
            echo "Skipping unsupported architecture ${{ matrix.arch }} on macOS"
          fi

      # ======================
      # Windows: Use MSYS2 to install libffi and build
      # ======================
      - name: Setup MSYS2
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: mingw-w64-x86_64-libffi
          msystem: MINGW64
      - name: Build on Windows
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          echo "Building for architecture ${{ matrix.arch }}"
          # Assume only x86_64 and x86 are supported on Windows.
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            g++ -std=c++17 -o xojoscript.exe xojoscript.cpp -lffi
          elif [ "${{ matrix.arch }}" = "x86" ]; then
            g++ -std=c++17 -m32 -o xojoscript.exe xojoscript.cpp -lffi
          else
            echo "Cross-compiling for ${{ matrix.arch }} is not supported on Windows"
          fi